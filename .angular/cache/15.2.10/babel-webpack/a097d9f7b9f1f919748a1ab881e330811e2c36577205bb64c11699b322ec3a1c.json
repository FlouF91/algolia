{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nimport { getInsightsAnonymousUserTokenInternal } from \"../helpers/index.js\";\nimport { warning, noop, getAppIdAndApiKey, find, safelyRunOnBrowser } from \"../lib/utils/index.js\";\nvar ALGOLIA_INSIGHTS_VERSION = '2.13.0';\nvar ALGOLIA_INSIGHTS_SRC = \"https://cdn.jsdelivr.net/npm/search-insights@\".concat(ALGOLIA_INSIGHTS_VERSION, \"/dist/search-insights.min.js\");\nexport function createInsightsMiddleware() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _insightsClient = props.insightsClient,\n    insightsInitParams = props.insightsInitParams,\n    onEvent = props.onEvent,\n    _props$$$internal = props.$$internal,\n    $$internal = _props$$$internal === void 0 ? false : _props$$$internal,\n    _props$$$automatic = props.$$automatic,\n    $$automatic = _props$$$automatic === void 0 ? false : _props$$$automatic;\n  var potentialInsightsClient = _insightsClient;\n  if (!_insightsClient && _insightsClient !== null) {\n    safelyRunOnBrowser(function (_ref) {\n      var window = _ref.window;\n      var pointer = window.AlgoliaAnalyticsObject || 'aa';\n      if (typeof pointer === 'string') {\n        potentialInsightsClient = window[pointer];\n      }\n      if (!potentialInsightsClient) {\n        window.AlgoliaAnalyticsObject = pointer;\n        if (!window[pointer]) {\n          window[pointer] = function () {\n            if (!window[pointer].queue) {\n              window[pointer].queue = [];\n            }\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            window[pointer].queue.push(args);\n          };\n          window[pointer].version = ALGOLIA_INSIGHTS_VERSION;\n          window[pointer].shouldAddScript = true;\n        }\n        potentialInsightsClient = window[pointer];\n      }\n    });\n  }\n  // if still no insightsClient was found, we use a noop\n  var insightsClient = potentialInsightsClient || noop;\n  return function (_ref2) {\n    var instantSearchInstance = _ref2.instantSearchInstance;\n    // remove existing default insights middleware\n    // user-provided insights middleware takes precedence\n    var existingInsightsMiddlewares = instantSearchInstance.middleware.filter(function (m) {\n      return m.instance.$$type === 'ais.insights' && m.instance.$$internal;\n    }).map(function (m) {\n      return m.creator;\n    });\n    instantSearchInstance.unuse.apply(instantSearchInstance, _toConsumableArray(existingInsightsMiddlewares));\n    var _getAppIdAndApiKey = getAppIdAndApiKey(instantSearchInstance.client),\n      _getAppIdAndApiKey2 = _slicedToArray(_getAppIdAndApiKey, 2),\n      appId = _getAppIdAndApiKey2[0],\n      apiKey = _getAppIdAndApiKey2[1];\n\n    // search-insights.js also throws an error so dev-only clarification is sufficient\n    process.env.NODE_ENV === 'development' ? warning(Boolean(appId && apiKey), 'could not extract Algolia credentials from searchClient in insights middleware.') : void 0;\n    var queuedUserToken = undefined;\n    var queuedAuthenticatedUserToken = undefined;\n    var userTokenBeforeInit = undefined;\n    var authenticatedUserTokenBeforeInit = undefined;\n    var queue = insightsClient.queue;\n    if (Array.isArray(queue)) {\n      // Context: The umd build of search-insights is asynchronously loaded by the snippet.\n      //\n      // When user calls `aa('setUserToken', 'my-user-token')` before `search-insights` is loaded,\n      // ['setUserToken', 'my-user-token'] gets stored in `aa.queue`.\n      // Whenever `search-insights` is finally loaded, it will process the queue.\n      //\n      // But here's the reason why we handle it here:\n      // At this point, even though `search-insights` is not loaded yet,\n      // we still want to read the token from the queue.\n      // Otherwise, the first search call will be fired without the token.\n      var _map = ['setUserToken', 'setAuthenticatedUserToken'].map(function (key) {\n        var _ref3 = find(queue.slice().reverse(), function (_ref5) {\n            var _ref6 = _slicedToArray(_ref5, 1),\n              method = _ref6[0];\n            return method === key;\n          }) || [],\n          _ref4 = _slicedToArray(_ref3, 2),\n          value = _ref4[1];\n        return value;\n      });\n      var _map2 = _slicedToArray(_map, 2);\n      queuedUserToken = _map2[0];\n      queuedAuthenticatedUserToken = _map2[1];\n    }\n\n    // If user called `aa('setUserToken')` or `aa('setAuthenticatedUserToken')`\n    // before creating the Insights middleware, we temporarily store the token\n    // and set it later on.\n    //\n    // Otherwise, the `init` call might override them with anonymous user token.\n    insightsClient('getUserToken', null, function (_error, userToken) {\n      userTokenBeforeInit = normalizeUserToken(userToken);\n    });\n    insightsClient('getAuthenticatedUserToken', null, function (_error, userToken) {\n      authenticatedUserTokenBeforeInit = normalizeUserToken(userToken);\n    });\n\n    // Only `init` if the `insightsInitParams` option is passed or\n    // if the `insightsClient` version doesn't supports optional `init` calling.\n    if (insightsInitParams || !isModernInsightsClient(insightsClient)) {\n      insightsClient('init', _objectSpread({\n        appId: appId,\n        apiKey: apiKey,\n        partial: true\n      }, insightsInitParams));\n    }\n    var initialParameters;\n    var helper;\n    return {\n      $$type: 'ais.insights',\n      $$internal: $$internal,\n      $$automatic: $$automatic,\n      onStateChange: function onStateChange() {},\n      subscribe: function subscribe() {\n        if (!insightsClient.shouldAddScript) return;\n        var errorMessage = '[insights middleware]: could not load search-insights.js. Please load it manually following https://alg.li/insights-init';\n        try {\n          var script = document.createElement('script');\n          script.async = true;\n          script.src = ALGOLIA_INSIGHTS_SRC;\n          script.onerror = function () {\n            instantSearchInstance.emit('error', new Error(errorMessage));\n          };\n          document.body.appendChild(script);\n          insightsClient.shouldAddScript = false;\n        } catch (cause) {\n          insightsClient.shouldAddScript = false;\n          instantSearchInstance.emit('error', new Error(errorMessage));\n        }\n      },\n      started: function started() {\n        insightsClient('addAlgoliaAgent', 'insights-middleware');\n        helper = instantSearchInstance.mainHelper;\n        initialParameters = {\n          userToken: helper.state.userToken,\n          clickAnalytics: helper.state.clickAnalytics\n        };\n\n        // We don't want to force clickAnalytics when the insights is enabled from the search response.\n        // This means we don't enable insights for indices that don't opt in\n        if (!$$automatic) {\n          helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread(_objectSpread({}, helper.state), {}, {\n            clickAnalytics: true\n          }));\n        }\n        if (!$$internal) {\n          instantSearchInstance.scheduleSearch();\n        }\n        var setUserTokenToSearch = function setUserTokenToSearch(userToken) {\n          var immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          var normalizedUserToken = normalizeUserToken(userToken);\n          if (!normalizedUserToken) {\n            return;\n          }\n          var existingToken = helper.state.userToken;\n          function applyToken() {\n            helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread(_objectSpread({}, helper.state), {}, {\n              userToken: normalizedUserToken\n            }));\n            if (existingToken && existingToken !== userToken) {\n              instantSearchInstance.scheduleSearch();\n            }\n          }\n\n          // Delay the token application to the next render cycle\n          if (!immediate) {\n            setTimeout(applyToken, 0);\n          } else {\n            applyToken();\n          }\n        };\n        var anonymousUserToken = getInsightsAnonymousUserTokenInternal();\n        if (anonymousUserToken) {\n          // When `aa('init', { ... })` is called, it creates an anonymous user token in cookie.\n          // We can set it as userToken.\n          setUserTokenToSearch(anonymousUserToken, true);\n        }\n        function setUserToken(token, userToken, authenticatedUserToken) {\n          setUserTokenToSearch(token, true);\n          if (userToken) {\n            insightsClient('setUserToken', userToken);\n          }\n          if (authenticatedUserToken) {\n            insightsClient('setAuthenticatedUserToken', authenticatedUserToken);\n          }\n        }\n\n        // We consider the `userToken` or `authenticatedUserToken` before an\n        // `init` call of higher importance than one from the queue.\n        var tokenBeforeInit = authenticatedUserTokenBeforeInit || userTokenBeforeInit;\n        var queuedToken = queuedAuthenticatedUserToken || queuedUserToken;\n        if (tokenBeforeInit) {\n          setUserToken(tokenBeforeInit, userTokenBeforeInit, authenticatedUserTokenBeforeInit);\n        } else if (queuedToken) {\n          setUserToken(queuedToken, queuedUserToken, queuedAuthenticatedUserToken);\n        }\n\n        // This updates userToken which is set explicitly by `aa('setUserToken', userToken)`\n        insightsClient('onUserTokenChange', setUserTokenToSearch, {\n          immediate: true\n        });\n\n        // This updates userToken which is set explicitly by `aa('setAuthenticatedtUserToken', authenticatedUserToken)`\n        insightsClient('onAuthenticatedUserTokenChange', function (authenticatedUserToken) {\n          // If we're unsetting the `authenticatedUserToken`, we revert to the `userToken`\n          if (!authenticatedUserToken) {\n            insightsClient('getUserToken', null, function (_, userToken) {\n              setUserTokenToSearch(userToken);\n            });\n          }\n          setUserTokenToSearch(authenticatedUserToken);\n        }, {\n          immediate: true\n        });\n        var insightsClientWithLocalCredentials = insightsClient;\n        if (isModernInsightsClient(insightsClient)) {\n          insightsClientWithLocalCredentials = function insightsClientWithLocalCredentials(method, payload) {\n            var extraParams = {\n              headers: {\n                'X-Algolia-Application-Id': appId,\n                'X-Algolia-API-Key': apiKey\n              }\n            };\n\n            // @ts-ignore we are calling this only when we know that the client actually is correct\n            return insightsClient(method, payload, extraParams);\n          };\n        }\n        instantSearchInstance.sendEventToInsights = function (event) {\n          if (onEvent) {\n            onEvent(event, insightsClientWithLocalCredentials);\n          } else if (event.insightsMethod) {\n            // Source is used to differentiate events sent by instantsearch from those sent manually.\n            event.payload.algoliaSource = ['instantsearch'];\n            if ($$automatic) {\n              event.payload.algoliaSource.push('instantsearch-automatic');\n            }\n            if (event.eventModifier === 'internal') {\n              event.payload.algoliaSource.push('instantsearch-internal');\n            }\n            insightsClientWithLocalCredentials(event.insightsMethod, event.payload);\n            process.env.NODE_ENV === 'development' ? warning(Boolean(helper.state.userToken), \"\\nCannot send event to Algolia Insights because `userToken` is not set.\\n\\nSee documentation: https://www.algolia.com/doc/guides/building-search-ui/going-further/send-insights-events/js/#setting-the-usertoken\\n\") : void 0;\n          } else {\n            process.env.NODE_ENV === 'development' ? warning(false, 'Cannot send event to Algolia Insights because `insightsMethod` option is missing.') : void 0;\n          }\n        };\n      },\n      unsubscribe: function unsubscribe() {\n        insightsClient('onUserTokenChange', undefined);\n        insightsClient('onAuthenticatedUserTokenChange', undefined);\n        instantSearchInstance.sendEventToInsights = noop;\n        if (helper && initialParameters) {\n          helper.overrideStateWithoutTriggeringChangeEvent(_objectSpread(_objectSpread({}, helper.state), initialParameters));\n          instantSearchInstance.scheduleSearch();\n        }\n      }\n    };\n  };\n}\n\n/**\n * Determines if a given insights `client` supports the optional call to `init`\n * and the ability to set credentials via extra parameters when sending events.\n */\nfunction isModernInsightsClient(client) {\n  var _split$map = (client.version || '').split('.').map(Number),\n    _split$map2 = _slicedToArray(_split$map, 2),\n    major = _split$map2[0],\n    minor = _split$map2[1];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  var v3 = major >= 3;\n  var v2_6 = major === 2 && minor >= 6;\n  var v1_10 = major === 1 && minor >= 10;\n  /* eslint-enable @typescript-eslint/naming-convention */\n\n  return v3 || v2_6 || v1_10;\n}\n\n/**\n * While `search-insights` supports both string and number user tokens,\n * the Search API only accepts strings. This function normalizes the user token.\n */\nfunction normalizeUserToken(userToken) {\n  if (!userToken) {\n    return undefined;\n  }\n  return typeof userToken === 'number' ? userToken.toString() : userToken;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}