{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { checkRendering, createDocumentationLink, createDocumentationMessageGenerator, noop, warning } from \"../../lib/utils/index.js\";\nvar withUsage = createDocumentationMessageGenerator({\n  name: 'rating-menu',\n  connector: true\n});\nvar $$type = 'ais.ratingMenu';\nvar MAX_VALUES_PER_FACET_API_LIMIT = 1000;\nvar STEP = 1;\nvar createSendEvent = function createSendEvent(_ref) {\n  var instantSearchInstance = _ref.instantSearchInstance,\n    helper = _ref.helper,\n    getRefinedStar = _ref.getRefinedStar,\n    attribute = _ref.attribute;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 1) {\n      instantSearchInstance.sendEventToInsights(args[0]);\n      return;\n    }\n    var facetValue = args[1],\n      _args$ = args[2],\n      eventName = _args$ === void 0 ? 'Filter Applied' : _args$;\n    var _args$0$split = args[0].split(':'),\n      _args$0$split2 = _slicedToArray(_args$0$split, 2),\n      eventType = _args$0$split2[0],\n      eventModifier = _args$0$split2[1];\n    if (eventType !== 'click') {\n      return;\n    }\n    var isRefined = getRefinedStar() === Number(facetValue);\n    if (!isRefined) {\n      instantSearchInstance.sendEventToInsights({\n        insightsMethod: 'clickedFilters',\n        widgetType: $$type,\n        eventType: eventType,\n        eventModifier: eventModifier,\n        payload: {\n          eventName: eventName,\n          index: helper.getIndex(),\n          filters: [\"\".concat(attribute, \">=\").concat(facetValue)]\n        },\n        attribute: attribute\n      });\n    }\n  };\n};\n/**\n * **StarRating** connector provides the logic to build a custom widget that will let\n * the user refine search results based on ratings.\n *\n * The connector provides to the rendering: `refine()` to select a value and\n * `items` that are the values that can be selected. `refine` should be used\n * with `items.value`.\n */\nvar connectRatingMenu = function connectRatingMenu(renderFn) {\n  var unmountFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  checkRendering(renderFn, withUsage());\n  return function (widgetParams) {\n    var _ref2 = widgetParams || {},\n      attribute = _ref2.attribute,\n      _ref2$max = _ref2.max,\n      max = _ref2$max === void 0 ? 5 : _ref2$max;\n    var sendEvent;\n    if (!attribute) {\n      throw new Error(withUsage('The `attribute` option is required.'));\n    }\n    var _getRefinedStar = function getRefinedStar(state) {\n      var _values$;\n      var values = state.getNumericRefinements(attribute);\n      if (!((_values$ = values['>=']) !== null && _values$ !== void 0 && _values$.length)) {\n        return undefined;\n      }\n      return values['>='][0];\n    };\n    var getFacetsMaxDecimalPlaces = function getFacetsMaxDecimalPlaces(facetResults) {\n      var maxDecimalPlaces = 0;\n      facetResults.forEach(function (facetResult) {\n        var _facetResult$name$spl = facetResult.name.split('.'),\n          _facetResult$name$spl2 = _slicedToArray(_facetResult$name$spl, 2),\n          _facetResult$name$spl3 = _facetResult$name$spl2[1],\n          decimal = _facetResult$name$spl3 === void 0 ? '' : _facetResult$name$spl3;\n        maxDecimalPlaces = Math.max(maxDecimalPlaces, decimal.length);\n      });\n      return maxDecimalPlaces;\n    };\n    var getFacetValuesWarningMessage = function getFacetValuesWarningMessage(_ref3) {\n      var maxDecimalPlaces = _ref3.maxDecimalPlaces,\n        maxFacets = _ref3.maxFacets,\n        maxValuesPerFacet = _ref3.maxValuesPerFacet;\n      var maxDecimalPlacesInRange = Math.max(0, Math.floor(Math.log10(MAX_VALUES_PER_FACET_API_LIMIT / max)));\n      var maxFacetsInRange = Math.min(MAX_VALUES_PER_FACET_API_LIMIT, Math.pow(10, maxDecimalPlacesInRange) * max);\n      var solutions = [];\n      if (maxFacets > MAX_VALUES_PER_FACET_API_LIMIT) {\n        solutions.push(\"- Update your records to lower the precision of the values in the \\\"\".concat(attribute, \"\\\" attribute (for example: \").concat(5.123456789.toPrecision(maxDecimalPlaces + 1), \" to \").concat(5.123456789.toPrecision(maxDecimalPlacesInRange + 1), \")\"));\n      }\n      if (maxValuesPerFacet < maxFacetsInRange) {\n        solutions.push(\"- Increase the maximum number of facet values to \".concat(maxFacetsInRange, \" using the \\\"configure\\\" widget \").concat(createDocumentationLink({\n          name: 'configure'\n        }), \" and the \\\"maxValuesPerFacet\\\" parameter https://www.algolia.com/doc/api-reference/api-parameters/maxValuesPerFacet/\"));\n      }\n      return \"The \".concat(attribute, \" attribute can have \").concat(maxFacets, \" different values (0 to \").concat(max, \" with a maximum of \").concat(maxDecimalPlaces, \" decimals = \").concat(maxFacets, \") but you retrieved only \").concat(maxValuesPerFacet, \" facet values. Therefore the number of results that match the refinements can be incorrect.\\n    \").concat(solutions.length ? \"To resolve this problem you can:\\n\".concat(solutions.join('\\n')) : \"\");\n    };\n    function getRefinedState(state, facetValue) {\n      var isRefined = _getRefinedStar(state) === Number(facetValue);\n      var emptyState = state.resetPage().removeNumericRefinement(attribute);\n      if (!isRefined) {\n        return emptyState.addNumericRefinement(attribute, '<=', max).addNumericRefinement(attribute, '>=', Number(facetValue));\n      }\n      return emptyState;\n    }\n    var toggleRefinement = function toggleRefinement(helper, facetValue) {\n      sendEvent('click:internal', facetValue);\n      helper.setState(getRefinedState(helper.state, facetValue)).search();\n    };\n    var connectorState = {\n      toggleRefinementFactory: function toggleRefinementFactory(helper) {\n        return toggleRefinement.bind(null, helper);\n      },\n      createURLFactory: function createURLFactory(_ref4) {\n        var state = _ref4.state,\n          createURL = _ref4.createURL,\n          getWidgetUiState = _ref4.getWidgetUiState,\n          helper = _ref4.helper;\n        return function (value) {\n          return createURL(function (uiState) {\n            return getWidgetUiState(uiState, {\n              searchParameters: getRefinedState(state, value),\n              helper: helper\n            });\n          });\n        };\n      }\n    };\n    return {\n      $$type: $$type,\n      init: function init(initOptions) {\n        var instantSearchInstance = initOptions.instantSearchInstance;\n        renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(initOptions)), {}, {\n          instantSearchInstance: instantSearchInstance\n        }), true);\n      },\n      render: function render(renderOptions) {\n        var instantSearchInstance = renderOptions.instantSearchInstance;\n        renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(renderOptions)), {}, {\n          instantSearchInstance: instantSearchInstance\n        }), false);\n      },\n      getRenderState: function getRenderState(renderState, renderOptions) {\n        return _objectSpread(_objectSpread({}, renderState), {}, {\n          ratingMenu: _objectSpread(_objectSpread({}, renderState.ratingMenu), {}, _defineProperty({}, attribute, this.getWidgetRenderState(renderOptions)))\n        });\n      },\n      getWidgetRenderState: function getWidgetRenderState(_ref5) {\n        var helper = _ref5.helper,\n          results = _ref5.results,\n          state = _ref5.state,\n          instantSearchInstance = _ref5.instantSearchInstance,\n          createURL = _ref5.createURL;\n        var facetValues = [];\n        if (!sendEvent) {\n          sendEvent = createSendEvent({\n            instantSearchInstance: instantSearchInstance,\n            helper: helper,\n            getRefinedStar: function getRefinedStar() {\n              return _getRefinedStar(helper.state);\n            },\n            attribute: attribute\n          });\n        }\n        var refinementIsApplied = false;\n        var totalCount = 0;\n        var facetResults = results === null || results === void 0 ? void 0 : results.getFacetValues(attribute, {});\n        if (results && facetResults) {\n          var maxValuesPerFacet = facetResults.length;\n          var maxDecimalPlaces = getFacetsMaxDecimalPlaces(facetResults);\n          var maxFacets = Math.pow(10, maxDecimalPlaces) * max;\n          process.env.NODE_ENV === 'development' ? warning(maxFacets <= maxValuesPerFacet || Boolean(results.__isArtificial), getFacetValuesWarningMessage({\n            maxDecimalPlaces: maxDecimalPlaces,\n            maxFacets: maxFacets,\n            maxValuesPerFacet: maxValuesPerFacet\n          })) : void 0;\n          var refinedStar = _getRefinedStar(state);\n          var _loop = function _loop(star) {\n            var isRefined = refinedStar === star;\n            refinementIsApplied = refinementIsApplied || isRefined;\n            var count = facetResults.filter(function (f) {\n              return Number(f.name) >= star && Number(f.name) <= max;\n            }).map(function (f) {\n              return f.count;\n            }).reduce(function (sum, current) {\n              return sum + current;\n            }, 0);\n            totalCount += count;\n            if (refinedStar && !isRefined && count === 0) {\n              // skip count==0 when at least 1 refinement is enabled\n              // eslint-disable-next-line no-continue\n              return \"continue\";\n            }\n            var stars = _toConsumableArray(new Array(Math.floor(max / STEP))).map(function (_v, i) {\n              return i * STEP < star;\n            });\n            facetValues.push({\n              stars: stars,\n              name: String(star),\n              label: String(star),\n              value: String(star),\n              count: count,\n              isRefined: isRefined\n            });\n          };\n          for (var star = STEP; star < max; star += STEP) {\n            var _ret = _loop(star);\n            if (_ret === \"continue\") continue;\n          }\n        }\n        facetValues = facetValues.reverse();\n        var hasNoResults = results ? results.nbHits === 0 : true;\n        return {\n          items: facetValues,\n          hasNoResults: hasNoResults,\n          canRefine: (!hasNoResults || refinementIsApplied) && totalCount > 0,\n          refine: connectorState.toggleRefinementFactory(helper),\n          sendEvent: sendEvent,\n          createURL: connectorState.createURLFactory({\n            state: state,\n            createURL: createURL,\n            helper: helper,\n            getWidgetUiState: this.getWidgetUiState\n          }),\n          widgetParams: widgetParams\n        };\n      },\n      dispose: function dispose(_ref6) {\n        var state = _ref6.state;\n        unmountFn();\n        return state.removeNumericRefinement(attribute);\n      },\n      getWidgetUiState: function getWidgetUiState(uiState, _ref7) {\n        var searchParameters = _ref7.searchParameters;\n        var value = _getRefinedStar(searchParameters);\n        return removeEmptyRefinementsFromUiState(_objectSpread(_objectSpread({}, uiState), {}, {\n          ratingMenu: _objectSpread(_objectSpread({}, uiState.ratingMenu), {}, _defineProperty({}, attribute, typeof value === 'number' ? value : undefined))\n        }), attribute);\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref8) {\n        var uiState = _ref8.uiState;\n        var value = uiState.ratingMenu && uiState.ratingMenu[attribute];\n        var withDisjunctiveFacet = searchParameters.addDisjunctiveFacet(attribute).removeNumericRefinement(attribute).removeDisjunctiveFacetRefinement(attribute);\n        if (!value) {\n          return withDisjunctiveFacet.setQueryParameters({\n            numericRefinements: _objectSpread(_objectSpread({}, withDisjunctiveFacet.numericRefinements), {}, _defineProperty({}, attribute, {}))\n          });\n        }\n        return withDisjunctiveFacet.addNumericRefinement(attribute, '<=', max).addNumericRefinement(attribute, '>=', value);\n      }\n    };\n  };\n};\nfunction removeEmptyRefinementsFromUiState(indexUiState, attribute) {\n  if (!indexUiState.ratingMenu) {\n    return indexUiState;\n  }\n  if (typeof indexUiState.ratingMenu[attribute] !== 'number') {\n    delete indexUiState.ratingMenu[attribute];\n  }\n  if (Object.keys(indexUiState.ratingMenu).length === 0) {\n    delete indexUiState.ratingMenu;\n  }\n  return indexUiState;\n}\nexport default connectRatingMenu;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}