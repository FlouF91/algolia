{"ast":null,"code":"import { noop } from \"./noop.js\";\n/**\n * Logs a warning when this function is called, in development environment only.\n */\nvar deprecate = function deprecate(fn, message) {\n  return fn;\n};\n\n/**\n * Logs a warning\n * This is used to log issues in development environment only.\n */\nvar warn = noop;\n\n/**\n * Logs a warning if the condition is not met.\n * This is used to log issues in development environment only.\n */\nvar _warning = noop;\nif (process.env.NODE_ENV === 'development') {\n  warn = function warn(message) {\n    // eslint-disable-next-line no-console\n    console.warn(\"[InstantSearch.js]: \".concat(message.trim()));\n  };\n  deprecate = function deprecate(fn, message) {\n    var hasAlreadyPrinted = false;\n    return function () {\n      if (!hasAlreadyPrinted) {\n        hasAlreadyPrinted = true;\n        process.env.NODE_ENV === 'development' ? warn(message) : void 0;\n      }\n      return fn.apply(void 0, arguments);\n    };\n  };\n  _warning = function warning(condition, message) {\n    if (condition) {\n      return;\n    }\n    var hasAlreadyPrinted = _warning.cache[message];\n    if (!hasAlreadyPrinted) {\n      _warning.cache[message] = true;\n      process.env.NODE_ENV === 'development' ? warn(message) : void 0;\n    }\n  };\n  _warning.cache = {};\n}\nexport { warn, deprecate, _warning as warning };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}