{"ast":null,"code":"import { h } from 'preact';\nimport { readDataAttributes } from \"../../helpers/insights.js\";\nimport { deserializePayload, warning } from \"../utils/index.js\";\nexport var createInsightsEventHandler = function createInsightsEventHandler(_ref) {\n  var insights = _ref.insights,\n    sendEvent = _ref.sendEvent;\n  return function (event) {\n    // new way, e.g. bindEvent(\"click\", hit, \"Hit clicked\")\n    var insightsThroughSendEvent = findInsightsTarget(event.target, event.currentTarget, function (element) {\n      return element.hasAttribute('data-insights-event');\n    });\n    if (insightsThroughSendEvent) {\n      var payload = parseInsightsEvent(insightsThroughSendEvent);\n      payload.forEach(function (single) {\n        return sendEvent(single);\n      });\n    }\n\n    // old way, e.g. instantsearch.insights(\"clickedObjectIDsAfterSearch\", { .. })\n    var insightsThroughFunction = findInsightsTarget(event.target, event.currentTarget, function (element) {\n      return element.hasAttribute('data-insights-method') && element.hasAttribute('data-insights-payload');\n    });\n    if (insightsThroughFunction) {\n      var _readDataAttributes = readDataAttributes(insightsThroughFunction),\n        method = _readDataAttributes.method,\n        _payload = _readDataAttributes.payload;\n      insights(method, _payload);\n    }\n  };\n};\nfunction findInsightsTarget(startElement, endElement, validator) {\n  var element = startElement;\n  while (element && !validator(element)) {\n    if (element === endElement) {\n      return null;\n    }\n    element = element.parentElement;\n  }\n  return element;\n}\nfunction parseInsightsEvent(element) {\n  var serializedPayload = element.getAttribute('data-insights-event');\n  if (typeof serializedPayload !== 'string') {\n    throw new Error('The insights middleware expects `data-insights-event` to be a base64-encoded JSON string.');\n  }\n  try {\n    return deserializePayload(serializedPayload);\n  } catch (error) {\n    throw new Error('The insights middleware was unable to parse `data-insights-event`.');\n  }\n}\n\n/**\n * @deprecated use `sendEvent` directly instead\n */\nexport default function withInsightsListener(BaseComponent) {\n  process.env.NODE_ENV === 'development' ? warning(false, 'The `withInsightsListener` function is deprecated and will be removed in the next major version. Please use `sendEvent` directly instead.') : void 0;\n  return function WithInsightsListener(props) {\n    var handleClick = createInsightsEventHandler(props);\n    return h(\"div\", {\n      onClick: handleClick\n    }, h(BaseComponent, props));\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}